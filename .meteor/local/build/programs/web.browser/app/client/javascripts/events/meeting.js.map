{"version":3,"sources":["meteor://ğŸ’»app/client/javascripts/events/meeting.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/javascripts/events/meeting.js","sourcesContent":["var timerId = 0;\n\n//Initialisation de la fonction de tri par drag'n'drop des speech\nvar sortableList;\nfunction computeSortable(element) {\n    element.sortable({\n        items: \"div.speech-item:not(.active)\",\n        stop: function(e, ui) {\n            // get the dragged html element and the one before\n            //   and after it\n            el = ui.item.get(0);\n            before = ui.item.prev().get(0);\n            after = ui.item.next().get(0);\n            newRank = null;\n\n            //  Blaze.getData takes as a parameter an html element\n            //    and will return the data context that was bound when\n            //    that html element was rendered!\n            if (!before) {\n                //if it was dragged into the first position grab the\n                // next element's data context and subtract one from the rank\n                newRank = parseInt(Blaze.getData(after).rank) - 1;\n            } else if (!after) {\n                //if it was dragged into the last position grab the\n                //  previous element's data context and add one to the rank\n                newRank = parseInt(Blaze.getData(before).rank) + 1;\n            }\n            else {\n                //else take the average of the two ranks of the previous\n                // and next elements\n                newRank = (parseInt(Blaze.getData(after).rank) + parseInt(Blaze.getData(before).rank)) / 2;\n            }\n\n            //update the dragged Item's rank\n            if (newRank != null) {\n                Speeches.update(Speeches.findOne({_id: Blaze.getData(el)._id})._id, {$set: {rank: newRank}});\n            }\n            else {\n                return false;\n            }\n        }\n    })\n}\n\n//Appel de la fonction d'initialisation de tri par drag'n'drop Ã  la fin du rendu de la page\nTemplate.meeting.rendered = function () {\n    sortableList = this.$('#speech-list');\n    sortableList.disableSelection();\n    if (Users.findOne({_id: Session.get(\"userId\")}).type == \"animator\") {\n        computeSortable(sortableList);\n    }\n};\n  \n/** The events that meeting template contains */\nTemplate.meeting.events({\n    /** A click on talk opens the lineup page */\n    'click #talkCancel': function(e) {\n        if(e.target.value == \"Talk\") {\n            Router.go('/meeting/' + Session.get(\"meetingId\") + '/lineup');\n        } else {\n            Speeches.update(Speeches.findOne({user: Session.get(\"userId\"), status: {$in: [\"ongoing\", \"pending\"]}})._id, {$set: {status: \"done\"}});\n        }\n    },\n    /** A click on waitProceed starts or stops the timer */\n    'click #waitProceed': function(e) {\n        //Arret du timer\n        if(e.target.value == \"Wait\") {\n            Meteor.clearInterval(timerId);\n            Speeches.update(\n                Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"})._id,\n                {$set: {status: \"pending\"}}\n            );\n        } else {\n            Speeches.update(\n                Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"pending\"}, {sort: {rank: 1}})._id,\n                {$set: {status: \"ongoing\"}}\n            );\n\n            //Lancement du timer\n            timerId = Meteor.setInterval(function() {\n                var currentSpeech = Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"});\n                var user = Users.findOne({_id:currentSpeech.user});\n                var paroles = [];\n                var time = 1;\n\n                //IncrÃ©mentation du compteur associÃ© a l'ordre du speech\n                if (user.paroles === undefined) {\n                    paroles.push({\"order\": currentSpeech.orderChoose, \"time\": 1});\n                } else {\n                    var paroleFound = false;\n                    paroles = user.paroles;\n                    paroles.forEach(function (el) {\n                        if (el['order'] == currentSpeech.orderChoose) {\n                            paroleFound = true;\n                            el['time'] = parseInt(el['time'])+1;\n                        }\n                    });\n                    if (!paroleFound) {\n                        paroles.push({\"order\": currentSpeech.orderChoose, \"time\": 1});\n                    }\n                }\n\n                Users.update(user._id,  {$set: {paroles: paroles}});\n\n                //Update du temps restant du speech\n                Speeches.update(\n                    currentSpeech._id,\n                    {$set: {timeLeft: Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"}).timeLeft + 1}}\n                );\n                //Update du statut du speech si celui ci est terminÃ©\n                if(Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"}).timeLeft == Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"}).time){\n                    Speeches.update(\n                        Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"})._id,\n                        {$set: {status: \"done\"}}\n                    );\n                    Meteor.clearInterval(timerId);\n                }\n            } , 1000);\n        }\n        //Rafraichi la fonction de drag'n'drop\n        //Utile pour empÃªcher le dÃ©placement du premier meeting quand on clique sur 'proceed'\n        //trouver une autre solution (la mÃ©thode \"refresh\" semble inefficace)\n        setTimeout(function () {\n            sortableList.sortable(\"destroy\");\n            computeSortable(sortableList);\n        }, 100)\n        ;\n    },\n\n    /** A click on next goes to the next speech */\n    'click #next': function() {\n        Meteor.clearInterval(timerId);\n        Speeches.update(Speeches.findOne({meeting: Session.get(\"meetingId\"), status: {$in: [\"ongoing\", \"pending\"]}})._id, {$set: {status: \"done\"}});\n    },\n\n    /** A click on closeMeeting closes the meeting */\n    'click #closeMeeting': function() {\n        Meetings.update(Session.get(\"meetingId\"), {$set: {status: \"done\"}});\n        Session.set(\"meetingId\", \"\");\n        Session.set(\"userId\", \"\");\n        Router.go(\"end\");\n    },\n\n    //Ajout d'un nouveau champ de saisie lorsqu'un caractÃ¨re est renseignÃ©\n    'keyup .participantsEmails': function(e) {\n        var input = $(e.target);\n\n        if (input.val().length > 0) {\n            var rank = input.parents(\".participantEmailInput\")[0].getAttribute('rank');\n            var form = input.parents(\"#inviteForm\");\n            var nextRank = parseInt(rank) + 1;\n\n            if ($(form).find('.participantEmailInput[rank=\"'+nextRank+'\"]').length < 1) {\n                var newInput = $(input.parents(\".participantEmailInput\")[0].cloneNode(true));\n                newInput.find(\".participantsEmails\").val(\"\");\n                newInput.attr('rank', nextRank);\n                $(input.parents(\".email-input-group\")[0]).append(newInput);\n            }\n        }\n    },\n\n    //Ajout d'un nouveau champ de saisie lorsqu'un caractÃ¨re est renseignÃ©\n    'keyup .participantsName': function(e) {\n        var input = $(e.target);\n\n        if (input.val().length > 0) {\n            var rank = input.parents(\".participantNameInput\")[0].getAttribute('rank');\n            var form = input.parents(\"#localForm\");\n            var nextRank = parseInt(rank) + 1;\n\n            if ($(form).find('.participantNameInput[rank=\"'+nextRank+'\"]').length < 1) {\n                var newInput = $(input.parents(\".participantNameInput\")[0].cloneNode(true));\n                newInput.find(\".participantsName\").val(\"\");\n                newInput.attr('rank', nextRank);\n                $(input.parents(\".name-input-group\")[0]).append(newInput);\n            }\n        }\n    },\n\n    'submit #inviteForm': function(e) {\n        e.preventDefault();\n        var meetingId = Session.get(\"meetingId\");\n        var meeting = Meetings.findOne({_id:meetingId});\n        var dialog = $(\"#invitationModal\");\n        dialog.modal(\"hide\");\n\n        var participantsInputs = $('.participantsEmails');\n        var participantsEmails = [];\n\n        for (i = 0; i < participantsInputs.length; i++) {\n            if (participantsInputs[i].value != \"\") {\n                participantsEmails.push(participantsInputs[i].value);\n            }\n        }\n\n        // remove already invited emails from emails to invite\n        var invitedParticipants = Session.get('invitedParticipants');\n        if (typeof invitedParticipants != 'undefined') {\n            for (i = 0; i < invitedParticipants.length; i++) {\n                for (var j = 0; j < participantsEmails.length; j++) {\n                    if (invitedParticipants[i] == participantsEmails[j]) {\n                        participantsEmails.splice(j,1);\n                    }\n                }\n            }\n            invitedParticipants = invitedParticipants.concat(participantsEmails);\n            Session.set('invitedParticipants', invitedParticipants);\n        } else {\n            Session.set('invitedParticipants', participantsEmails);\n        }\n\n        var userId = \"\";\n        for(var i = 0; i < participantsEmails.length; i++) {\n            //CrÃ©ation des utilisateurs invitÃ©s\n            userId = Users.insert({\n                name: 'participant pending',\n                email: participantsEmails[i],\n                type: \"participant\",\n                status: \"pending\",\n                meeting: meetingId\n            });\n\n            //Envoi d'un mail aux invitÃ©s pour qu'ils puissent rejoindre le meeting\n            Meteor.call('sendEmail', participantsEmails[i], 'noreply@taketalk.com', 'TakeTalk invitation',\n                'You are invited to a session of TakeTalk. \\n\\n' +\n                'Please follow this link : taketalk.meteor.com/join/' + meetingId + '/' + userId + '\\n' +\n                'Here is the link of the report : ' + meeting.reportLink + '\\n\\n' +\n                'If you quit the meeting and want to return here is the password : ' + meeting.password\n            );\n            //console.log('taketalk.meteor.com/join/' + meetingId + '/' + userId + ' -> ' + meeting.password);\n        }\n\n        //\n        $(\".participantEmailInput[rank!='1']\").remove();\n        participantsInputs.val(\"\");\n    },\n\n    'submit #localForm': function(e) {\n        e.preventDefault();\n        var meetingId = Session.get(\"meetingId\");\n        var dialog = $(\"#localModal\");\n        dialog.modal(\"hide\");\n\n        var nameInputs = $('.participantsName');\n        var participantsName = [];\n\n        for (var i = 0; i < nameInputs.length; i++) {\n            if (nameInputs[i].value != \"\") {\n                participantsName.push(nameInputs[i].value);\n            }\n        }\n\n        //* remove already invited emails from emails to invite\n        var localParticipants = Session.get(\"guests\");\n        if (typeof localParticipants != 'undefined') {\n            for (i = 0; i < localParticipants.length; i++) {\n                for (var j = 0; j < participantsName.length; j++) {\n                    if (localParticipants[i] == participantsName[j]) {\n                        participantsName.splice(j,1);\n                    }\n                }\n            }\n            localParticipants = localParticipants.concat(participantsName);\n            Session.set(\"guests\", localParticipants);\n        } else {\n            Session.set(\"guests\", participantsName);\n        }\n\n        $(\".participantNameInput[rank!='1']\").remove();\n        nameInputs.val(\"\");\n\n        //CrÃ©ation des utilisateurs ajoutÃ©s en local\n        for (i = 0; i < participantsName.length; i++) {\n            Users.insert({\n                name: participantsName[i],\n                type: \"\",\n                status: \"online\",\n                meeting: meetingId,\n                _id: participantsName[i]\n            });\n        }\n    },\n\n    'click .removeGuest': function(e) {\n        e.preventDefault();\n        var guests = Session.get(\"guests\");\n        var guestToRemove = $(e.target).parents( \".guestRemove\" ).attr(\"guest\");\n        guests.splice(guests.indexOf(guestToRemove),1);\n        Session.set(\"guests\", guests);\n        Users.remove({_id: guestToRemove});\n    },\n\n    'click .remove-speech': function(e) {\n        e.preventDefault();\n        var speechId = $(e.target).parents( \".speechRemove\" ).attr(\"speech-id\");\n        Speeches.remove({_id: speechId});\n    }\n});\n\nTemplate.meeting.helpers ({\n    //Retourne l'ordre du jour et les temps estimÃ©s\n    ordres: function () {\n        var meeting = Meetings.findOne({_id: Session.get(\"meetingId\")});\n        var ordres = meeting.ordres;\n        var times = meeting.ordreTimes;\n        var lengthOrdres = ordres.length;\n        var ordreAndTimes = new Array(lengthOrdres);\n        for (var i = 0; i < lengthOrdres; i++) {\n            ordreAndTimes[i] = {\"ordre\" : ordres[i], \"time\" :times[i]};\n        }\n        return ordreAndTimes;\n    },\n\n    //Retourne le ien du rapport du meeting\n    reportLink: function () {\n        var meeting = Meetings.findOne({_id: Session.get(\"meetingId\")});\n        return meeting.reportLink;\n    },\n\n    //Retourne vrai si un lien de rapport a Ã©tÃ© renseignÃ© a la crÃ©ation\n    isReportLink: function() {\n        return Meetings.findOne({_id: Session.get(\"meetingId\")}).reportLink != \"\";\n    },\n\n    isTimeNull: function (time) {\n        return time == '0:00';\n    },\n\n    //Retourne les utilisateurs ajoutÃ©s en local\n    guests: function () {\n        return Session.get(\"guests\");\n    },\n\n    //Retourne vrai si le paramÃ¨tre est le nom d'un utilisateur ajoutÃ© localement\n    isSessionGuest: function (name) {\n        var guests = Session.get(\"guests\");\n        if (guests !== undefined) {\n            return (guests.indexOf(name) >= 0);\n        }\n        return false;\n    },\n\n    //Retourne vrai si l'utilisateur local est animateur\n    isAnimator: function() {\n        return Users.findOne({_id: Session.get(\"userId\")}).type == \"animator\";\n    },\n\n    //Retourne vrai si le speech a des mots clÃ©\n    isSubject: function(id) {\n        return Speeches.findOne({_id: id}).subject != \"\";\n    },\n\n    //Retourne les speech triÃ©s par rang\n\t sortedSpeeches: function() {\n      return Speeches.find({}, {sort: {rank: 1}});\n    }\n});\n\n\nTemplate.parole.helpers ({\n    displayTime: function(time) {\n        var response;\n        if (time < 60) {\n            response = time +' secondes';\n        } else {\n            amount = Math.floor(parseInt(time)/60);\n            response =  amount+' minute';\n            if (amount > 1) {\n                response += 's';\n            }\n        }\n        return response;\n    }\n});\n/*\n// ******************************************************************************************************************\n// Fonction de QRCode Ã  partir de la library qrcodejs disponible sur le site http://davidshimjs.github.io/qrcodejs/\n// ******************************************************************************************************************\n$(document).ready(function(){\n\n    var meetingId = Session.get(\"meetingId\");\n    var userId = Users.insert({\n        name: 'participant pending',\n        email: \"temp@taketalk.fr\",\n        type: \"participant\",\n        status: \"pending\",\n        meeting: meetingId\n    });\n    console.log('taketalk.meteor.com/join/' + meetingId + '/' + userId);\n\n    //new QRCode(document.getElementById(\"qrcode\"), \"http://taketalk.meteor.com/join/\" + meetingId + \"/\" + userId);\n    var qrcode = new QRCode(document.getElementById(\"qrcode\"), {\n        text: \"http://taketalk.meteor.com/join/\" + meetingId + \"/\" + userId,\n        width: 128,\n        height: 128,\n        colorDark: \"#000000\",\n        colorLight: \"#ffffff\",\n        correctLevel: QRCode.CorrectLevel.H\n    });\n    //qrcode.makeCode(\"http://taketalk.meteor.com/join/\" + meetingId + \"/\" + userId);\n}); //*/\n"]}